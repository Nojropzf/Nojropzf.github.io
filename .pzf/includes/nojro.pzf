<?php
class PZF {
	public $dbh;
	public $user;
	
	public function __construct() {
		$this->version = filesize(__FILE__);

		try {
			$this->dbh = new PDO("mysql:host=".config('db.host').";charset=utf8", config('db.user'), config('db.pass')) or die("Error, failed to connect to the database.");
		}
		catch (PDOException $err) {
			die('There was an error connecting to MySQL. Check your mysql credentials.');
		}
		
		if (empty(config('db.name'))) die('You need to specify a database name in your configuration.');
			else $this->select_db(config('db.name'));
	}
	
	public function select_db($db_name) {
		$this->dbh->query("USE ".$db_name.";") or die("Error accessing the '".$db_name."' database, please visit <a href=\"/install/?key=\">install</a>.");
		$this->dbh->query("SET sql_mode='';");
		
		$this->dbh->setAttribute(PDO::ATTR_EMULATE_PREPARES, true);
		$this->dbh->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
	}

	public function checkInstalled() {
		try {
			$this->fetch_site_setup();
			return true;
		}
		catch (PDOException $err) {
			return false;
		}
	}

	public function get_version(){
		return $this->version;
	}
	
	public function quote_escape($string) {
		return $this->dbh->quote($string);
	}

	public function define_dapp($dapp, $contract){
		define('NOJ_DAPP', $dapp);
		define('DAPP_CONTRACT_ADDR', $contract);
	}
	
	public function last_insert_id() {
		return $this->dbh->lastInsertId();
	}
	
	public function run_query($query, $params=[]) {
		if ($statement = $this->dbh->prepare($query)) {
			if ($params === false) $params = [];
			$statement->execute($params);
			
			return $statement;
		}
		else {
			throw new Exception("Failed to prepare a query");
		}
	}
	
	public function run_limited_query($query, $params) {
		$this->dbh->setAttribute(PDO::ATTR_EMULATE_PREPARES, false);
		$result = $this->run_query($query, $params);
		$this->dbh->setAttribute(PDO::ATTR_EMULATE_PREPARES, true);
		return $result;
	}
	
public function run_insert_query($table, $values) {
		$query = "INSERT INTO ".$table." (";
		$values_clause = "";
		
		foreach ($values as $key => $value) {
			$query .= $key.", ";
			$values_clause .= ":".$key.", ";
		}
		$query = substr($query, 0, -2).") VALUES (".substr($values_clause, 0, -2).");";
		
		$this->run_query($query, $values);
	}
	
	public function bulk_mapped_update_query($table, $set_data, $where_data) {
		$set_columns = array_keys($set_data);
		$where_columns = array_keys($where_data);
		$num_records = count($where_data[$where_columns[0]]);
		
		$q = "UPDATE ".$table." SET ";
		
		foreach ($set_columns as $set_column) {
			$q .= $set_column."=(CASE";
			$data_pos = 0;
			for ($data_pos=0; $data_pos<$num_records; $data_pos++) {
				$q .= " WHEN (".$where_columns[0]."=".$where_data[$where_columns[0]][$data_pos].") THEN '".$set_data[$set_column][$data_pos]."'";
			}
			$q .= " END),";
		}
		$q = substr($q, 0, -1)." WHERE ".$where_columns[0]." IN (".implode(",",$where_data[$where_columns[0]]) .");";
		
		$this->run_query($q);
	}
	
	public function log_then_die($message) {
		$this->log_message($message);
		throw new Exception($message);
	}
	
	public function log_message($message) {
		$this->run_insert_query("logs", ['body' => $message]);
	}
	
	public function utf8_clean($str) {
		return iconv('UTF-8', 'UTF-8//IGNORE', $str);
	}

	public function make_alphanumeric($string, $extrachars="") {
		$allowed_chars = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".$extrachars;
		$new_string = "";
		
		for ($i=0; $i<strlen($string); $i++) {
			if (is_numeric(strpos($allowed_chars, $string[$i])))
				$new_string .= $string[$i];
		}
		return $new_string;
	}

	public function parseCoin($amount,int $decimals = null) {
		if (empty($decimals)) {
			$decimals = 8;
		}
		return round_to($amount, $decimals, 3, 1);
	}

	public function parseCash($amount) {
		return round_to($amount, '2', '2', 1);
	}

	public function random_string($length) {
		$characters = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";
		$bits_per_char = ceil(log(strlen($characters), 2));
		$hex_chars_per_char = ceil($bits_per_char/4);
		$hex_chars_needed = $length*$hex_chars_per_char;
		$rand_data = bin2hex(openssl_random_pseudo_bytes(ceil($hex_chars_needed/2), $crypto_strong));
		if(!$crypto_strong) $this->log_then_die("An insecure random string of length ".$length." was generated.");
		
		$string = "";
		for ($i=0; $i<$length; $i++) {
			$hex_chars = substr($rand_data, $i*$hex_chars_per_char, $hex_chars_per_char);
			$rand_num = hexdec($hex_chars);
			$rand_index = $rand_num%strlen($characters);
			$string .= $characters[$rand_index];
		}
		return $string;
	}
	
	public function random_hex_string($length) {
		$characters = "0123456789abcdef";
		$bits_per_char = ceil(log(strlen($characters), 2));
		$hex_chars_per_char = ceil($bits_per_char/4);
		$hex_chars_needed = $length*$hex_chars_per_char;
		$rand_data = bin2hex(openssl_random_pseudo_bytes(ceil($hex_chars_needed/2), $crypto_strong));
		if(!$crypto_strong) $this->log_then_die("An insecure random string of length ".$length." was generated.");
		
		$string = "";
		for ($i=0; $i<$length; $i++) {
			$hex_chars = substr($rand_data, $i*$hex_chars_per_char, $hex_chars_per_char);
			$rand_num = hexdec($hex_chars);
			$rand_index = $rand_num%strlen($characters);
			$string .= $characters[$rand_index];
		}
		return $string;
	}
	
	public function random_number($length) {
		$characters = "0123456789";
		$bits_per_char = ceil(log(strlen($characters), 2));
		$hex_chars_per_char = ceil($bits_per_char/4);
		$hex_chars_needed = $length*$hex_chars_per_char;
		$rand_data = bin2hex(openssl_random_pseudo_bytes(ceil($hex_chars_needed/2), $crypto_strong));
		if(!$crypto_strong) $this->log_then_die("An insecure random string of length ".$length." was generated.");
		
		$string = "";
		for ($i=0; $i<$length; $i++) {
			$hex_chars = substr($rand_data, $i*$hex_chars_per_char, $hex_chars_per_char);
			$rand_num = hexdec($hex_chars);
			$rand_index = $rand_num%strlen($characters);
			$string .= $characters[$rand_index];
		}
		return $string;
	}
	
	public function strong_strip_tags($string) {
		return htmlspecialchars(strip_tags($string));
	}

	public function update_schema() {
		$migrations_path = "app/sql";
		
		$keep_looping = true;
		
		try {
			$migration_id = ((int)$this->get_site_constant("last_migration_id"))+1;
		}
		catch (Exception $e) {
			$keep_looping = false;
		}
		
		if ($keep_looping) {
			while ($keep_looping) {
				$fname = $migrations_path."/".$migration_id.".sql";
				if (is_file($fname)) {
					$cmd = $this->mysql_binary_location()." -u ".config('db.user')." -h ".config('db.host');
					if (config('db.pass')) $cmd .= " -p'".config('db.pass')."'";
					$cmd .= " ".config('db.name')." < ".$fname." 2>&1";
					
					$cmd_response = exec($cmd);
					
					if (!empty($cmd_response)) {
						$skip_error = "mysql: [Warning]";
						if (substr($cmd_response, 0, strlen($skip_error)) == $skip_error) {}
						else {
							$error_path = $migrations_path."/".$migration_id."-errors.txt";
							if ($error_fh = @fopen($error_path, 'w')) {
								fwrite($error_fh, $cmd_response);
								fclose($error_fh);
							}
							echo "Error on migration #".$migration_id.": ".$cmd_response."<br/>\n";
							die();
						}
					}
					$migration_id++;
				}
				else {
					$keep_looping = false;
					$migration_id--;
				}
			}
			$this->set_site_constant("last_migration_id", $migration_id);
		}
	}

	public function runningFromCommandline() {
		if (PHP_SAPI == "cli") return true;
		else return false;
	}

	public function safe_merge_argv_to_request(&$argv, &$allowed_params) {
		if ($argv && $this->runningFromCommandline()) {
			$arg_i = 0;
			foreach ($argv as $arg) {
				if ($arg_i > 0) {
					$arg_parts = explode("=", $arg);
					if(count($arg_parts) == 2 && in_array($arg_parts[0], $allowed_params)) {
						$_REQUEST[$arg_parts[0]] = $arg_parts[1];
					}
				}
				$arg_i++;
			}
		}
	}
	
	public function mysql_binary_location() {
		$var = $this->run_query("SHOW VARIABLES LIKE 'basedir';")->fetch();
		$var_val = str_replace("\\", "/", $var['Value']);
		if (!in_array($var_val[strlen($var_val)-1], ['/', '\\'])) $var_val .= "/";
		if (PHP_OS == "WINNT") return $var_val."bin/mysql.exe";
		else return $var_val."bin/mysql";
	}
	
	public function php_binary_location() {
		if (PHP_OS == "WINNT") {
			if ($_SERVER['SERVER_NAME'] == "Mongoose") $location = dirname(dirname(dirname(dirname(__DIR__))))."/php/php.exe";
			else $location = dirname(ini_get('extension_dir'))."/php.exe";
		}
		else $location = PHP_BINDIR ."/php";
		
		return $location;
	}
	
	public function run_shell_command($cmd, $print_debug) {
		if (PHP_OS == "WINNT") $cmd .= " > NUL 2>&1";
		else $cmd .= " 2>&1 >/dev/null";
		$cmd .= " &";
		
		$cmd = str_replace("\\", "/", $cmd);
		
		if ($print_debug) echo $cmd."\n";
		
		if (empty($this->pipe_config)) {
			$this->pipe_config = [
				0 => ['pipe', 'r'],
				1 => ['pipe', 'w'],
				2 => ['pipe', 'w']
			];
		}
		if (empty($this->pipes)) {
			$this->pipes = [];
		}
		
		$new_process = proc_open($cmd, $this->pipe_config, $this->pipes);
		
		return $new_process;
	}
	
	public function to_significant_digits($number, $significant_digits) {
		if ($number === 0) return 0;
		$number_digits = floor(log10($number));
		$returnval = (pow(10, $number_digits - $significant_digits + 1)) * round($number/(pow(10, $number_digits - $significant_digits + 1)));
		return $returnval;
	}

	public function format_bignum($number) {
		if ($number >= 0) $sign = "";
		else $sign = "-";
		
		$number = abs($number);
		if ($number > 1) $number = $this->to_significant_digits($number, 5);
		
		if ($number >= pow(10, 9)) {
			return $sign.($number/pow(10, 9))."B";
		}
		else if ($number >= pow(10, 6)) {
			return $sign.($number/pow(10, 6))."M";
		}
		else if ($number > pow(10, 5)) {
			return $sign.($number/pow(10, 3))."k";
		}
		else return $sign.rtrim(rtrim(number_format(sprintf('%.8F', $number), 8), '0'), ".");
	}
	
	public function round_to($number, $min_decimals, $target_sigfigs, $format_string) {
		$decimals = (int) ($target_sigfigs-1-floor(log10($number)));
		if ($min_decimals !== false) $decimals = max($min_decimals, $decimals);
		if ($format_string) return @number_format($number, $decimals);
		else return round($number, $decimals);
	}
	
	public function format_percentage($number) {
		if ($number >= 50) $min_decimals = 0;
		else $min_decimals = 2;

		$max_decimals = 15;
		$number = $this->to_significant_digits($number, $max_decimals-1);
		
		$decimal_places = $min_decimals;
		$keep_looping = true;
		do {
			$pow10 = pow(10, $decimal_places);
			if ((string)($number*$pow10) == (string)(round($number*$pow10))) {
				$keep_looping = false;
			}
			else $decimal_places++;
		}
		while ($keep_looping && $decimal_places < $max_decimals);
		
		return number_format($number, $decimal_places);
	}
	
	public function to_ranktext($rank) {
		// date("S", strtotime("1/".$rank."/".date("Y", time())));
		$a = strlen(strval($rank));
		$b = substr($rank, ($a-1), $a);
		$c = '';
		switch ($b) {
			case '1':
				$c = 'st';
				break;
			case '2':
				$c = 'nd';
				break;
			case '3':
				$c = 'rd';
				break;
			
			default:
				$c = 'th';
				break;
		}
		return $rank.$c;
	}

	public function nice_date($date){
		if (is_int($date)) {
			$date = date('dS', $date)." of ".date('M Y', $date);
		}else{
			$date = date('dS', strtotime($date))." of ".date('M Y', strtotime($date));
		}
		return $date;
	}

	public function output_message($status_code, $message, $dump_object=false) {
		header('Content-Type: application/json');
		
		if (empty($dump_object)) $dump_object = ["status_code"=>$status_code, "message"=>$message];
		else {
			$dump_object['status_code'] = $status_code;
			$dump_object['message'] = $message;
		}
		echo json_encode($dump_object, JSON_PRETTY_PRINT);
	}
	
	public function format_seconds($seconds) {
		$seconds = intval($seconds);
		$years = floor($seconds/(3600*24*365));
		$months = floor($seconds/(3600*24*31));
		$weeks = floor($seconds/(3600*24*7));
		$days = floor($seconds/(3600*24));
		$hours = floor($seconds / 3600);
		$minutes = floor($seconds / 60);
		
		if ($years > 0) {
			if ($years == 1) $str = $years." year";
			else $str = $years." years";
			$months = $months - 12*$years;
			if ($months != 1) $str .= " and ".$months." months";
			else $str .= " and ".$months." month";
			return $str;
		}
		else if ($months > 0) {
			if ($months == 1) $str = $months." month";
			else $str = $months." months";
			$weeks = $weeks - 4*$months;
			if ($weeks != 1) $str .= " and ".$weeks." weeks";
			else $str .= " and ".$weeks." week";
			return $str;
		}
		else if ($weeks > 0) {
			if ($weeks == 1) $str = $weeks." week";
			else $str = $weeks." weeks";
			$days = $days - 7*$weeks;
			if ($days != 1) $str .= " and ".$days." days";
			else $str .= " and ".$days." day";
			return $str;
		}
		else if ($days > 0) {
			if ($days == 1) $str = $days." day";
			else $str = $days." days";
			$hours = $hours - 24*$days;
			if ($hours != 1) $str .= " and ".$hours." hours";
			else $str .= " and ".$hours." hour";
			return $str;
		}
		else if ($hours > 0) {
			$str = "";
			if ($hours != 1) $str .= $hours." hours";
			else $str .= $hours." hour";
			$remainder_min = round(($seconds - (3600*$hours))/60);
			if ($remainder_min > 0 && $hours < 3) {
				$str .= " and ".$remainder_min." ";
				if ($remainder_min == '1') $str .= "minute";
				else $str .= "minutes";
			}
			return $str;
		}
		else if ($minutes > 0) {
			$remainder_sec = $seconds-$minutes*60;
			$str = "";
			if ($minutes != 1) $str .= $minutes." minutes";
			else $str .= $minutes." minute";
			if ($remainder_sec > 0 && $minutes < 10) $str .= " and ".$remainder_sec." seconds";
			return $str;
		}
		else {
			if ($seconds != 1) return $seconds." seconds";
			else return $seconds." second";
		}
	}
	
	public function prepend_a_or_an($word) {
		$firstletter = strtolower($word[0]);
		if (strpos('aeiou', $firstletter)) return "an ".$word;
		else return "a ".$word;
	}

	public function convBase($numberInput, $fromBaseInput, $toBaseInput)
    {
         if ($fromBaseInput==$toBaseInput) return $numberInput;
         $fromBase = str_split($fromBaseInput,1);
         $toBase = str_split($toBaseInput,1);
         $number = str_split($numberInput,1);
         $fromLen=strlen($fromBaseInput);
         $toLen=strlen($toBaseInput);
         $numberLen=strlen($numberInput);
         $retval='';
         if ($toBaseInput == '0123456789')
         {
             $retval=0;
             for ($i = 1;$i <= $numberLen; $i++)
                 $retval = bcadd($retval, bcmul(array_search($number[$i-1], $fromBase),bcpow($fromLen,$numberLen-$i)));
             return $retval;
         }
         if ($fromBaseInput != '0123456789')
             $base10=$this->convBase($numberInput, $fromBaseInput, '0123456789');
         else
             $base10 = $numberInput;
         if ($base10<strlen($toBaseInput))
             return $toBase[$base10];
         while($base10 != '0')
         {
             $retval = $toBase[bcmod($base10,$toLen)].$retval;
             $base10 = bcdiv($base10,$toLen,0);
         }
         return $retval;
    }
	
	public function decimal_to_float($number) {
		if (strpos($number, ".") === false) return $number;
		else return rtrim(rtrim($number, '0'), '.');
	}
	
	public function lock_process($lock_name) {
		$this->set_site_constant($lock_name, getmypid());
	}
	
	public function unlock_process($lock_name) {
		if ($this->get_site_constant($lock_name) == getmypid()) {
			$this->set_site_constant($lock_name, '0');
		}
	}

	public function curl_post_request($url, $data, $headers) {
		$ch = curl_init($url);
		curl_setopt($ch, CURLOPT_HEADER, $headers);
		curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
		curl_setopt($ch, CURLOPT_POST, true);

		curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($data));
		$contents = curl_exec($ch);
		curl_close($ch);
		return $contents;
	}

	public function exchange_rate_between_currencies($numerator_currency_id, $denominator_currency_id, $ref_time, $ref_currency_id) {
		$price_time = time();
		
		if ($numerator_currency_id == $ref_currency_id) {
			$rate_ref_per_numerator = 1;
		}
		else {
			$rate_ref_per_numerator_record = $this->currency_price_at_time($numerator_currency_id, $ref_currency_id, $ref_time);
			$rate_ref_per_numerator = $rate_ref_per_numerator_record['price'];
			$price_time = min($price_time, $rate_ref_per_numerator_record['time_added']);
		}
		
		if ($denominator_currency_id == $ref_currency_id) {
			$rate_ref_per_denominator = 1;
		}
		else {
			$rate_ref_per_denominator_record = $this->currency_price_at_time($denominator_currency_id, $ref_currency_id, $ref_time);
			$rate_ref_per_denominator = $rate_ref_per_denominator_record['price'];
			$price_time = min($price_time, $rate_ref_per_denominator_record['time_added']);
		}
		
		return [
			'exchange_rate' => $rate_ref_per_numerator > 0 ? $rate_ref_per_denominator/$rate_ref_per_numerator : 0,
			'time' => $price_time
		];
	}
	
	public function currency_price_at_time($currency_id, $ref_currency_id, $ref_time) {
		return $this->run_query("SELECT * FROM prices WHERE currency_id=:currency_id AND reference_currency_id=:reference_currency_id AND time_added <= :ref_time ORDER BY time_added DESC LIMIT 1;", [
			'currency_id' => $currency_id,
			'reference_currency_id' => $ref_currency_id,
			'ref_time' => $ref_time
		])->fetch();
	}
	
	public function currency_price_after_time($currency_id, $ref_currency_id, $ref_time, $not_after_time) {
		return $this->run_query("SELECT * FROM prices WHERE currency_id=:currency_id AND reference_currency_id=:reference_currency_id AND time_added >= :ref_time AND time_added<=:not_after_time ORDER BY time_added ASC LIMIT 1;", [
			'currency_id' => $currency_id,
			'reference_currency_id' => $ref_currency_id,
			'ref_time' => $ref_time,
			'not_after_time' => $not_after_time
		])->fetch();
	}
	
	public function latest_currency_price($currency_id) {
		return $this->run_query("SELECT * FROM prices WHERE currency_id=:currency_id AND reference_currency_id=:reference_currency_id ORDER BY id DESC LIMIT 1;", [
			'currency_id' => $currency_id,
			'reference_currency_id' => $this->get_site_constant('reference_currency_id')
		])->fetch();
	}

	public function get_reference_currency() {
		return $this->fetch_currency_by_id($this->get_site_constant('reference_currency_id'));
	}
	
	public function set_reference_currency($reference_currency_id) {
		$has_ref_price = count($this->run_query("SELECT * FROM prices WHERE currency_id=:currency_id AND reference_currency_id=:currency_id;", ['currency_id' => $reference_currency_id])->fetchAll()) > 0;
		if (!$has_ref_price) {
			$app->run_insert_query("prices", [
				'reference_currency_id' => $reference_currency_id,
				'currency_id' => $reference_currency_id,
				'price' => 1,
				'time_added' => time()
			]);
		}
		$this->set_site_constant("reference_currency_id", $reference_currency_id);
	}

	public function update_all_currency_prices() {
		$reference_currency = $this->get_reference_currency();
		$usd_currency = $this->fetch_currency_by_id(1);
		
		$currency_urls = $this->run_query("SELECT * FROM currencies c JOIN oracle_urls o ON c.oracle_url_id=o.oracle_url_id WHERE c.id != :currency_id GROUP BY o.oracle_url_id ORDER BY o.oracle_url_id DESC;", ['currency_id'=>$reference_currency['id']]);
		
		while ($currency_url = $currency_urls->fetch()) {
			$api_response_raw = file_get_contents($currency_url['url']);
			echo "(".strlen($api_response_raw).") ".$currency_url['url']."<br/>\n";
			
			$currencies_by_url = $this->run_query("SELECT * FROM currencies WHERE oracle_url_id=:oracle_url_id ORDER BY id ASC;", ['oracle_url_id'=>$currency_url['oracle_url_id']]);
			
			while ($currency = $currencies_by_url->fetch()) {
				$ref_currency_info = $this->exchange_rate_between_currencies($usd_currency['id'], $reference_currency['id'], time(), $reference_currency['id']);
				
				$price_in_ref_currency = null;
				$price_usd = null;
				
				if ($currency_url['format_id'] == 2) {
					$api_response = json_decode($api_response_raw);
					$price_usd = $api_response->USD->bid;
				}
				else if ($currency_url['format_id'] == 1) {
					$api_response = json_decode($api_response_raw);
					if (!empty($api_response->rates)) {
						$api_rates = (array) $api_response->rates;
						$price_usd = 1/($api_rates[$currency['abbreviation']]);
					}
				}
				else if ($currency_url['format_id'] == 3) {
					$coin_data_raw = $this->first_snippet_between($api_response_raw, '<script id="__NEXT_DATA__" type="application/json">', '</script>');
					$coin_data = json_decode($coin_data_raw);
					$price_data = arrayToMapOnKey($coin_data->props->initialState->cryptocurrency->listingLatest->data, "symbol");
					
					if ($currency['id'] == $usd_currency['id']) {
						$price_in_ref_currency = 1/$price_data['BTC']->quote->USD->price;
					}
					else {
						$price_usd = $price_data[$currency['abbreviation']]->quote->USD->price;
					}
				}
				else if ($currency_url['format_id'] == 4) {
					$coin_data_raw = $this->first_snippet_between($api_response_raw, '<script type="application/ld+json">', '</script>');
					$coin_data = (array) json_decode($coin_data_raw);
					$price_data_arr = array_values($coin_data['@graph']);
					$price_data_by_currency = arrayToMapOnKey($price_data_arr, "name");
					
					if ($currency['id'] == $usd_currency['id']) {
						$price_in_ref_currency = 1/$price_data_by_currency['BTC']->offers->price;
					}
					else {
						$this_price_data = $price_data_by_currency[$currency['abbreviation']];
						
						$price_usd = $this_price_data->offers->price;
					}
				}
				else if ($currency_url['format_id'] == 5) {
					$coin_data = json_decode($api_response_raw);
					$price_in_ref_currency = 1/$coin_data->bpi->USD->rate_float;
				}
				
				if ($price_in_ref_currency == null) {
					$price_in_ref_currency = $price_usd/$ref_currency_info['exchange_rate'];
				}
				
				$price_in_ref_currency = $this->to_significant_digits($price_in_ref_currency, 10);
				
				if ($price_in_ref_currency > 0) {
					$this->run_insert_query("prices", [
						'currency_id' => $currency['id'],
						'reference_currency_id' => $reference_currency['id'],
						'price' => $price_in_ref_currency,
						'time_added' => time()
					]);
				}
			}
		}
	}

	public function add_price($currency_id,$reference_currency_id){
		$this->run_insert_query("prices", [
			'currency_id' => $currency_id,
			'reference_currency_id' => $reference_currency_id,
			'price' => 0,
			'time_added' => time()
		]);
	}
	
	public function currency_conversion_rate($numerator_currency_id, $denominator_currency_id) {
		if ($numerator_currency_id == $denominator_currency_id) {
			$returnvals['conversion_rate'] = 1;
		}
		else {
			$latest_numerator_rate = $this->latest_currency_price($numerator_currency_id);
			$latest_denominator_rate = $this->latest_currency_price($denominator_currency_id);

			$returnvals['numerator_price_id'] = $latest_numerator_rate['id'];
			$returnvals['denominator_price_id'] = $latest_denominator_rate['id'];
			if ($latest_numerator_rate['price'] > 0) $returnvals['conversion_rate'] = round(pow(10,8)*$latest_denominator_rate['price']/$latest_numerator_rate['price'])/pow(10,8);
			else $returnvals['conversion_rate'] = 0;
		}
		return $returnvals;
	}
	
	public function historical_currency_conversion_rate($numerator_price_id, $denominator_price_id) {
		$numerator_rate = $this->run_query("SELECT * FROM prices WHERE id=:price_id;", ['price_id'=>$numerator_price_id])->fetch();

		$denominator_rate = $this->run_query("SELECT * FROM prices WHERE id=:price_id;", ['price_id'=>$denominator_price_id])->fetch();
		
		return round(pow(10,8)*$denominator_rate['price']/$numerator_rate['price'])/pow(10,8);
	}

	public function first_snippet_between($string, $delim1, $delim2) {
		$startpos = strpos($string, $delim1);
		if ($startpos) {
			$snippet = substr($string, $startpos+strlen($delim1), strlen($string)-$startpos-strlen($delim1));
			$endpos = strpos($snippet, $delim2);
			if ($endpos) {
				$snippet = substr($snippet, 0, $endpos);
				return $snippet;
			}
			else return false;
		}
		else return false;
	}

	public function fetch_currency_by_abbreviation($abbreviation) {
		return $this->run_query("SELECT * FROM currencies WHERE abbreviation=:abbreviation;", ['abbreviation' => $abbreviation])->fetch();
	}
	
	public function fetch_currency_by_id($currency_id) {
		return $this->run_query("SELECT * FROM currencies WHERE id=:currency_id;", ['currency_id'=>$currency_id])->fetch();
	}

	public function fetch_block_by_hash($hash) {
		return $this->run_query("SELECT * FROM blt_blocks WHERE hash=:bhash;", ['bhash'=>$hash])->fetch();
	}

	public function fetch_block_by_id($bid) {
		return $this->run_query("SELECT * FROM blt_blocks WHERE id=:bid;", ['bid'=>$bid])->fetch();
	}

	public function fetch_blt_tx_by_hash($tx_hash) {
		return $this->run_query("SELECT * FROM blt_txs WHERE hash=:tx_hash;", ['tx_hash'=>$tx_hash])->fetch();
	}
	
	public function fetch_tx_by_hash($tx_hash) {
		return $this->run_query("SELECT * FROM transactions WHERE hash=:tx_hash;", ['tx_hash'=>$tx_hash])->fetch();
	}
	
	public function fetch_tx_by_id($transaction_id) {
		return $this->run_query("SELECT * FROM transactions WHERE id=:transaction_id;", ['transaction_id'=>$transaction_id])->fetch();
	}
	
	public function fetch_trade_by_id($td_id) {
		return $this->run_query("SELECT * FROM trades WHERE id=:td_id;", ['td_id'=>$td_id])->fetch();
	}
	
	public function fetch_user_tx($uid) {
		$typ = "deposit";
		$stat = "confirmed";
		return $this->run_query("SELECT hash FROM transactions WHERE user_id=:uid AND type=:typ AND status=:stat ORDER BY tx_time;", ['uid'=>$uid,'typ'=>$typ,'stat'=>$stat])->fetchAll();
	}
	public function fetch_user_trade($uid) {
		return $this->run_query("SELECT hash FROM trades WHERE user_id=:uid ORDER BY id;", ['uid'=>$uid])->fetchAll();
	}

	public function fetch_last_tx() {
		$stat = 'confirmed';
		return $this->run_query("SELECT * FROM transactions WHERE status=:stat ORDER BY id DESC LIMIT 1;", ['stat'=>$stat])->fetch();
	}

	public function fetch_plan_by_id($pn_id) {
		return $this->run_query("SELECT * FROM plans WHERE id=:pn_id;", ['pn_id'=>$pn_id])->fetch();
	}

	public function fetch_site_setup() {
		return $this->run_query("SELECT * FROM configs ;")->fetch();
	}

	public function fetch_wallet_by_id($wt_id) {
		return $this->run_query("SELECT * FROM wallets WHERE id=:wt_id;", ['wt_id'=>$wt_id])->fetch();
	}

	public function fetch_user_by_id($u_id) {
		return $this->run_query("SELECT * FROM users WHERE id=:u_id;", ['u_id'=>$u_id])->fetch();
	}

	public function fetch_users() {
		return $this->run_query("SELECT * FROM users;")->fetch();
	}

	public function fetch_admin_email() {
		$m = $this->run_query("SELECT email FROM users WHERE rank='admin' ORDER BY id DESC LIMIT 1;")->fetch();
		return $m['email'];
	}

	public function count_users() {
		$usr_num = $this->run_query("SELECT COUNT(id) FROM users;")->fetch();
		if ($usr_num[0]>0) return (int) $usr_num[0];
		else return 0;
	}

	public function fetch_users_count() {
		return $this->run_query("SELECT COUNT(id) FROM users;")->fetch();
	}

	public function count_block_tx($bid) {
		$tnxs = 1;
		if ($bid<1) {
			return (string) "1";
		}
		$block = $this->run_query("SELECT * FROM blt_blocks WHERE id=:bid ;",['bid'=>$bid])->fetch();
		$max = $block['timestamp'];

		$p = (int)($bid-1);
		if($bid<=1){
			$p = '1';
		}

		$pblock = $this->run_query("SELECT * FROM blt_blocks WHERE id=:bid ;",['bid'=> $p ])->fetch();
		$min = $pblock['timestamp'];
		
		$rtx = $this->run_query("SELECT COUNT(id) FROM transactions WHERE tx_time>:min AND tx_time<=:max ;", [
			'min'=>$min,
			'max'=>$max
		])->fetch(PDO::FETCH_NUM);

		$trades = $this->run_query("SELECT COUNT(id) FROM trades WHERE tx_time>:min AND tx_time<=:max ;", [
			'min'=>$min,
			'max'=>$max
		])->fetch(PDO::FETCH_NUM);

		$trx = $this->run_query("SELECT COUNT(id) FROM blt_txs WHERE tx_time>:min AND tx_time<=:max ;", [
			'min'=>$min,
			'max'=>$max
		])->fetch(PDO::FETCH_NUM);

		if ($rtx[0]>0) {
			$tnxs = $tnxs + (int) $rtx;
		}
		if ($trades[0]>0) {
			$tnxs = $tnxs + (int) $trades;
		}
		if($trx[0]>0){
			$tnxs = $tnxs + (int) $trx;
		}

		if(is_bool($tnxs)){
			return (string) "1";
		}else{
			return (string) $tnxs;
		}
	}

	public function get_block_tx($bid) {
		$btx = array();

		$block = $this->run_query("SELECT * FROM blt_blocks WHERE id=:bid ;",['bid'=>$bid])->fetch();
		$max = $block['timestamp'];

		$p = (int)($bid-1);

		$pblock = $this->run_query("SELECT * FROM blt_blocks WHERE id=:bid ;",['bid'=> $p ])->fetch();
		$min = $pblock['timestamp'];


		$rtx = $this->run_query("SELECT * FROM transactions WHERE tx_time>:min AND tx_time<=:max ;", [
			'min'=>$min,
			'max'=>$max
		])->fetch();
		
		$trades = $this->run_query("SELECT * FROM trades WHERE tx_time>:min AND tx_time<=:max ;", [
			'min'=>$min,
			'max'=>$max
		])->fetch();

		$trx = $this->run_query("SELECT * FROM blt_txs WHERE tx_time>:min AND tx_time<=:max ;", [
			'min'=>$min,
			'max'=>$max
		])->fetch();

		if ($bid<1) {
			$btx['coinbase']['hash'] = "4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b"; 
			$btx['coinbase']['amount'] = "50"; 
			$btx['coinbase']['timestamp'] = "1296688602"; 
		}

		$btx['coinbase']['hash'] = $block['merkel']; 
		$btx['coinbase']['amount'] = $block['blkvalue']; 
		$btx['coinbase']['timestamp'] = $block['timestamp']; 

		$btx['contract'] = $trades;
		$btx['transaction'] = $rtx;
		$btx['transfer'] = $trx;

		return $btx;
	}

	public function count_total_supply() {
		$total = 0;
		$t = $this->run_query("SELECT * FROM blt_blocks;")->fetch();
		for($i=0;$i<$this->get_site_constant('last_block_height');$i++) {
			$total = $total + $t[$i]['blkvalue'];
		}

		if (!is_bool($t)) {
			return $total;
		}
		return 0;
	}

	public function fetch_user_by_ref($u_ref) {
		$ref = strtoupper($u_ref);
		return $this->run_query("SELECT * FROM users WHERE ref=:u_ref;", ['u_ref'=>$ref])->fetch();
	}

	public function fetch_user_downlines($u_ref) {
		return $this->run_query("SELECT * FROM users WHERE ref_by=:u_ref;", ['u_ref'=>$u_ref])->fetch();
	}
	
	
	public function fetch_user_upline($uid) {
		return $this->run_query("SELECT ref_by FROM users WHERE id=:uid;", ['uid'=>$uid])->fetch();
	}
	public function fetch_user_last_trade($uid) {
		$stat = "completed";
		return $this->run_query("SELECT * FROM trades WHERE user_id=:uid AND status=:stat ORDER BY id DESC LIMIT 1;", ['uid'=>$uid,'stat'=>$stat])->fetch();
	}

	public function fetch_all_tx_amount() {
		$stat = 'confirmed';
		$coins_in = $this->run_query("SELECT SUM(amount) FROM transactions WHERE status=:stat;", ['stat'=>$stat])->fetch(PDO::FETCH_NUM);
		if ($coins_in[0] > 0) return $coins_in[0];
		else return 0;
	}

	public function fetch_user_active_trade_amount($uid) {
		$stat = 'active';
		$coins_in = $this->run_query("SELECT SUM(stake_amount) FROM trades WHERE user_id=:uid AND status=:stat;", ['uid'=>$uid,'stat'=>$stat])->fetch(PDO::FETCH_NUM);
		if ($coins_in[0] > 0) return $coins_in[0];
		else return 0;
	}

	public function fetch_all_tx_fees() {
		$stat = 'confirmed';
		$coins_in = $this->run_query("SELECT SUM(fee) FROM transactions WHERE status=:stat;", ['stat'=>$stat])->fetch(PDO::FETCH_NUM);
		if ($coins_in[0] > 0) return $coins_in[0];
		else return 0;
	}

	public function fetch_tx_fee($hash) {
		$xhash = $hash;
		$coins_in = $this->run_query("SELECT fee FROM blt_txs WHERE hash=:xhash;", ['xhash'=>$xhash])->fetch(PDO::FETCH_NUM);
		if ($coins_in[0] > 0) return $coins_in[0];
		else return 0;
	}

	public function fetch_tx_input($hash) {
		$xhash = $hash;
		$coins_in = $this->run_query("SELECT input FROM blt_txs WHERE hash=:xhash;", ['xhash'=>$xhash])->fetch(PDO::FETCH_NUM);
		if ($coins_in[0] > 0) return $coins_in[0];
		else return 0;
	}

	public function fetch_tx_output($hash) {
		$xhash = $hash;
		$coins_in = $this->run_query("SELECT output FROM blt_txs WHERE hash=:xhash;", ['xhash'=>$xhash])->fetch(PDO::FETCH_NUM);
		if ($coins_in[0] > 0) return $coins_in[0];
		else return 0;
	}

	public function fetch_received_by_address($addr) {
		$xaddr = $addr;
		$coins_in = $this->run_query("SELECT SUM(output) FROM blt_txs WHERE to_addr=:xaddr;", ['xaddr'=>$xaddr])->fetch(PDO::FETCH_NUM);
		if ($coins_in[0] > 0) return $coins_in[0];
		else return 0;
	}

	public function fetch_sent_by_address($addr) {
		$xaddr = $addr;
		$coins_in = $this->run_query("SELECT SUM(input) FROM blt_txs WHERE from_addr=:xaddr;", ['xaddr'=>$xaddr])->fetch(PDO::FETCH_NUM);
		if ($coins_in[0] > 0) return $coins_in[0];
		else return 0;
	}

	public function fetch_all_deposit_txs() {
		$stat = 'confirmed';
		$txtype = 'deposit';
		$coins_in = $this->run_query("SELECT SUM(amount) FROM transactions WHERE status=:stat AND type=:txtype;", ['stat'=>$stat, 'txtype'=>$txtype])->fetch(PDO::FETCH_NUM);
		if ($coins_in[0] > 0) return $coins_in[0];
		else return 0;
	}

	public function fetch_all_withdraw_txs() {
		$stat = 'confirmed';
		$txtype = 'withdraw';
		$coins_in = $this->run_query("SELECT SUM(amount) FROM transactions WHERE status=:stat AND type=:txtype;", ['stat'=>$stat, 'txtype'=>$txtype])->fetch(PDO::FETCH_NUM);
		if ($coins_in[0] > 0) return $coins_in[0];
		else return 0;
	}

	public function fetch_pool_ballance() {
		$pool_worth = $this->fetch_all_deposit_txs() - $this->fetch_all_withdraw_txs();
		if ($pool_worth > 0) return $pool_worth;
		else return 0;
	}
	
	public function fetch_game_by_identifier($url_identifier) {
		return $this->run_query("SELECT * FROM games WHERE url_identifier=:url_identifier;", ['url_identifier'=>$url_identifier])->fetch();
	}
	
	public function fetch_user_hodl_by_name($uid, $name) {
		return $this->run_query("SELECT * FROM hodl WHERE user_id=:uid AND name=:hodl_name;", ['uid'=>$uid, 'hodl_name'=>$name])->fetch();
	}

	public function cancel_transaction($transaction_id) {
		if ($transaction_id) $this->run_query("DELETE FROM transactions WHERE id=:transaction_id;", ['transaction_id'=>$transaction_id]);
	}

	public function add_tx_to_trades($tx_id) {
		if ($tx_id) $this->run_query("UPDATE transactions SET status=:stat WHERE id=:transaction_id;", ['transaction_id'=>$tx_id, 'stat'=>"confirmed"]);

		$txrow = $this->fetch_tx_by_id($tx_id);
		$pnrow = $this->fetch_plan_by_id($txrow['plan_id']);
		$ends = time() + $pnrow['duration'];
		$stat = 'active';

		$this->run_insert_query("trades",[
			'hash' => hash('sha256',$txrow['hash']),
			'user_id' => $txrow['user_id'],
			'start_time' => time(),
			'end_time' => $ends,
			'stake_amount' => $txrow['amount'],
			'roi_amount' => $pnrow['roi'],
			'plan_id' => $txrow['plan_id'],
			'tx_time' => $txrow['tx_time'],
			'status' => $stat
		]);
	}

	public function set_ctap($param)
	{
		$this->run_insert_query("ctap",[
			'name' => $param['name'],
			'user' => $param['uid'],
			'note' => $param['note'],
			'level' => $param['level']
		]);
	}
	
	public function del_user($id){
		if($id) 
			$this->run_query("DELETE FROM users WHERE id=:id;", ['id'=>$id]);
	}

	public function del_ctap($id){
		if($id) $this->run_query("DELETE FROM ctap WHERE id=:id;", ['id'=>$id]);
	}

	public function del_notice($id){
		if($id) $this->run_query("DELETE FROM logs WHERE id=:id;", ['id'=>$id]);
	}

	public function add_tx_to_retrades($tx_hash) {
		if ($tx_hash) $this->run_query("UPDATE transactions SET status=:stat WHERE hash=:transaction_hash;", ['transaction_hash'=>$tx_hash, 'stat'=>"confirmed"]);

		$txrow = $this->fetch_tx_by_hash($tx_hash);
		$pnrow = $this->fetch_plan_by_id($txrow['plan_id']);
		$ends = time() + $pnrow['duration'];
		$stat = 'active';
		
		$this->run_insert_query("trades",[
			'hash' => hash('sha256',$txrow['hash']),
			'user_id' => $txrow['user_id'],
			'start_time' => time(),
			'end_time' => $ends,
			'stake_amount' => $txrow['amount'],
			'roi_amount' => $pnrow['roi'],
			'plan_id' => $txrow['plan_id'],
			'tx_time' => $txrow['tx_time'],
			'status' => $stat
		]);
	}

	public function decline_tx($tx_id) {
		if ($tx_id) $this->run_query("UPDATE transactions SET status=:stat WHERE id=:transaction_id;", ['transaction_id'=>$tx_id, 'stat'=>"failed"]);
	}

	public function update_plan($pn_param) {
		if ($pn_param['id']) $this->run_query("UPDATE plans SET name=:pname, min=:pmin, max=:pmax, roi=:proi, duration=:pdura, close_dur=:pcdur, max_retrade=:pmax_rtd, ref_roi=:prf_roi WHERE id=:pn_id;", [
			'pname' => $pn_param['name'],
			'pmin' => $pn_param['min'],
			'pmax' => $pn_param['max'],
			'proi' => $pn_param['roi'],
			'pdura' => $pn_param['duration'],
			'pcdur' => $pn_param['close_dur'],
			'pmax_rtd' => $pn_param['max_retrade'],
			'prf_roi' => $pn_param['ref_roi'],
			'pn_id'=> $pn_param['id']
		]);
	}

	public function add_plan($pn_param) {
		$this->run_insert_query("plans", [
			'name' => $pn_param['name'],
			'min' => $pn_param['min'],
			'max' => $pn_param['max'],
			'roi' => $pn_param['roi'],
			'duration' => $pn_param['duration'],
			'close_dur' => $pn_param['close_dur'],
			'max_retrade' => $pn_param['max_retrade'],
			'ref_roi' => $pn_param['ref_roi']
		]);
	}

	public function add_new_tx($tx_param) {
		$this->run_insert_query("transactions", [
			'user_id' => $tx_param['user_id'],
			'plan_id' => $tx_param['plan_id'],
			'type' => $tx_param['type'],
			'blockchain' => $tx_param['blockchain'],
			'from_addr' => $tx_param['from_addr'],
			'to_addr' => $tx_param['to_addr'],
			'amount' => $tx_param['amount'],
			'hash' => $tx_param['hash'],
			'tx_time' => time()
		]);
	}

	public function add_new_log($tx_param) {
		
		if (isset($tx_param['time'])) {
			$time = $tx_param['time'];
		}else{
			$time = time();
		}

		if (isset($tx_param['user_id'])) {
			$user = $tx_param['user_id'];
		}else{
			$user = 1;
		}

		if (isset($tx_param['title'])) {
			$title = $tx_param['title'];
		}else{
			$title = $tx_param['type']." request";
		}

		if (isset($tx_param['body'])) {
			$body = $tx_param['body'];
		}else{
			$body = $tx_param['name']." made a new ".$title;
		}
		
		$this->run_insert_query("logs", [
			'type' => $tx_param['type'],
			'user' => $user,
			'log_time' => $time,
			'title' => $title,
			'body' => $body
		]);
	}

	public function add_re_tx($tx_param) {
		$this->run_insert_query("transactions", [
			'user_id' => $tx_param['user_id'],
			'plan_id' => $tx_param['plan_id'],
			'blockchain' => $tx_param['blockchain'],
			'from_addr' => $tx_param['from_addr'],
			'to_addr' => $tx_param['to_addr'],
			'amount' => $tx_param['amount'],
			'hash' => $tx_param['hash'],
			'type' => 'reinvest',
			'fee' => $tx_param['fee'],
			'tx_time' => time()
		]);
		$this->add_tx_to_retrades($tx_param['hash']);
	}

	public function add_send_tx($tx_param) {
		$this->run_insert_query("transactions", [
			'user_id' => $tx_param['from_id'],
			'from_addr' => $tx_param['from_addr'],
			'to_addr' => $tx_param['to_addr'],
			'amount' => $tx_param['amount'],
			'blockchain' => $tx_param['blockchain'],
			'hash' => hash('sha256', $tx_param['from_addr'].$tx_param['amount'].$tx_param['to_addr'].time()),
			'fee' => $tx_param['fee'],
			'status' => 'confirmed',
			'type' => 'transfer',
			'tx_time' => time()
		]);
	}

	public function add_blt_block($tx_param) {
		$this->run_insert_query("blt_blocks", [
			'hash' => $tx_param['hash'],
			'merkel' => $tx_param['merkel'],
			'blkvalue' => $tx_param['blkvalue'],
			'miner' => $tx_param['miner'],
			'hex' => $tx_param['hex'],
			'relayed_by' => $tx_param['relayed_by'],
			'timestamp' => time()
		]);
	}

	public function add_blt_tx($tx_param) {
		$this->run_insert_query("blt_txs", [
			'hash' => $tx_param['hash'],
			'prev_hash' => $tx_param['prev_hash'],
			'from_addr' => $tx_param['from_addr'],
			'to_addr' => $tx_param['to_addr'],
			'input' => $tx_param['input'],
			'output' => $tx_param['output'],
			'fee' => $tx_param['fee'],
			'hex' => $tx_param['hex'],
			'tx_time' => time()
		]);
	}

	public function add_new_currency($param) {
		$run = $this->run_insert_query("currencies", [
			'network_id' => $param['network_id'],
			'name' => $param['name'],
			'short_name' => $param['short_name'],
			'short_name_plural' => $param['short_name_plural'],
			'abbreviation' => $param['abbreviation'],
			'text_color' => $param['text_color'],
			'symbol' => $param['symbol'],
			'image_id' => $param['image_id']
		]);
		if(!$run){
			return false;
		}
		return true;
	}

	public function update_currency($wparam) {
		$run = $this->run_query("UPDATE currencies SET network_id=:wnetwork_id, name=:wname, short_name=:wshort_name, short_name_plural=:wshort_name_plural, abbreviation=:wabbreviation, symbol=:wsymbol, image_id=:wimage_id, text_color=:wtext_color WHERE id=:wid;", [
			'wnetwork_id' => $wparam['network_id'],
			'wname' => $wparam['name'],
			'wshort_name' => $wparam['short_name'],
			'wshort_name_plural' => $wparam['short_name_plural'],
			'wabbreviation' => $wparam['abbreviation'],
			'wsymbol' => $wparam['symbol'],
			'wimage_id' => $wparam['image_id'],
			'wtext_color' => $wparam['text_color'],
			'wid' => $wparam['id']
		]);
		if(!$run){
			return false;
		}
		return true;
	}

	public function add_new_wal($tx_param) {
		$this->run_insert_query("wallets", [
			'user_id' => $tx_param['user_id'],
			'name' => $tx_param['name'],
			'address' => $tx_param['address'],
			'pub_key' => $tx_param['pub_key'],
			'blockchain' => $tx_param['blockchain'],
			'coin' => $tx_param['coin'],
			'image_id' => $tx_param['image_id']
		]);
	}

	public function update_wallet($wparam) {
		return $this->run_query("UPDATE wallets SET user_id=:wuser_id, name=:wname, coin=:wcoin, address=:waddress, pub_key=:wpub_key, blockchain=:wblockchain, image_id=:wimage_id WHERE id=:wid;", [
			'wuser_id' => $wparam['user_id'],
			'wcoin' => $wparam['coin'],
			'wname' => $wparam['name'],
			'waddress' => $wparam['address'],
			'wpub_key' => $wparam['pub_key'],
			'wblockchain' => $wparam['blockchain'],
			'wimage_id' => $wparam['image_id'],
			'wid' => $wparam['id']
		]);
	}

	public function delet_plan($plan_id) {
		if ($plan_id) $this->run_query("DELETE FROM plans WHERE id=:plan_id;", ['plan_id'=>$plan_id]);
	}

	public function get_all_plan() {
		return $this->run_query("SELECT * FROM plans ORDER BY id DESC;")->fetch();
	}

	public function change_pwd($wparam) {
		$oldrow = $this->run_query("SELECT * FROM users WHERE id=:uid;", ['uid'=>$wparam['uid']])->fetch();
		if (md5($wparam['oldpwd'])===$oldrow['password']) {
			$this->run_query("UPDATE users SET password=:newpwd WHERE id=:uid;", ['newpwd'=>md5($wparam['newpwd']), 'uid'=>$wparam['uid']]);
			return true;
		}
		return false;
	}

	public function update_auto_mail($param) {
		return $this->run_query("UPDATE mails set subject=:subject, body=:body WHERE id=:uid;", [
			'subject' => $param['subject'],
			'body' => $param['body'],
			'uid' => $param['id']
		]);
	}
	public function tog_auto_mail($param) {
		return $this->run_query("UPDATE mails set status=:tog WHERE id=:id;", [
			'tog' => $param['tog'],
			'id' => $param['id']
		]);
	}

	public function update_config($wparam) {
		return $this->run_query("UPDATE configs SET site_name=:wsite_name, site_desc=:wsite_desc, site_url=:wsite_url, site_host=:wsite_host, site_email=:wsite_email, site_phone=:wsite_phone, site_year=:wsite_year, site_location=:wsite_location, fee=:fee, addon=:waddon, verify_acc=:verify_acc, site_about=:wsite_about, wall_gen=:wwall_gen, social=:wsocial;", [
			'wsite_name' => $wparam['site_name'],
			'wsite_desc' => $wparam['site_desc'],
			'wsite_url' => $wparam['site_url'],
			'wsite_host' => $wparam['site_host'],
			'fee' => $wparam['fee'],
			'verify_acc' => $wparam['verify_acc'],
			'wsite_email' => $wparam['site_email'],
			'wsite_phone' => $wparam['site_phone'],
			'wsite_year' => $wparam['site_year'],
			'wsite_location' => $wparam['site_location'],
			'wsite_about' => $wparam['site_about'],
			'waddon'=> $wparam['addon'],
			'wwall_gen' => $wparam['wall_gen'],
			'wsocial' => $wparam['social']
		]);
	}

	public function get_user_by_dapp_addr($addr) {
		$tusa = $this->fetch_users_count();
		for ($i=1; $i <=$tusa[0] ; $i++) { 
			$this_user = $this->fetch_user_by_id($i);
			$this_wall = $this->get_dapp_addr_by_username($this_user['username']);
			if ($this_wall===$addr) {
				return $this_user['id'];
			}
		}
		return false;
	}

	public function get_dapp_addr_by_username($username) {
		$dwal = '0x'.hash('sha1', $username.'@nojnetcoin.'.site_url());
		return $dwal;
	}

	function get_user_address($username, $type=null){
        $this->user = $this->get_dapp_addr_by_username($username);
        switch ($type) {
            case 'lagacy':
                $this->user = $this->convBase($this->text_to_hex(NOJnet_DAPP).substr($this->user, 2, 40),"0123456789abcdef", "123456789ABCDECGHIJKLMNOPQRSTUVWXYZabcdefghijklmopqrstuvwxyz");
                break;

            case 'sigwit':
                $this->user = 'nj1q'.$this->convBase(substr($this->user, 2, 40),"0123456789abcdef", "123456789ABCDECGHIJKLMNOPQRSTUVWXYZabcdefghijklmopqrstuvwxyz");
                break;

            case 'hash160':
                $this->user = substr($this->user, 2, 40);
                break;
            
            default:
                $this->user = $this->user;
                break;
        }
        return $this->user;
    }

	public function update_user($wparam) {
		return $this->run_query("UPDATE users SET name=:nname, email=:nemail, acc_balance=:nacc_balance, api_balance=:napi_balance, ref_balance=:nref_balance, lock_balance=:nlock_balance, rank=:nrank WHERE id=:nid;", [
			'nid' => $wparam['id'],
			'nname' => $wparam['name'],
			'nemail' => $wparam['email'],
			'nacc_balance' => $wparam['acc_balance'],
			'napi_balance' => $wparam['api_balance'],
			'nref_balance' => $wparam['ref_balance'],
			'nlock_balance' => $wparam['lock_balance'],
			'nrank' => $wparam['rank']
		]);
	}
	public function update_user_plan($wparam) {
	    $x = $wparam['plan'];
	    $y = $wparam['id'];
		return $this->run_query("UPDATE users SET plan=:nplan WHERE id=:nid;", [
			'nid' => $y,
			'nplan' => $x
		]);
	}


	public function confirm_tx($tx_id) {
		if ($tx_id) $this->run_query("UPDATE transactions SET status=:stat WHERE id=:transaction_id;", ['transaction_id'=>$tx_id, 'stat'=>"confirmed"]);
	}

	public function decline_and_refund_tx($tx_id) {
		$a0 = $this->fetch_tx_by_id($tx_id);
		$a1 = $this->fund_user_account($a0['user_id'], $a0['amount']);
		$this->run_query("UPDATE transactions SET status=:stat WHERE id=:transaction_id;", ['transaction_id'=>$tx_id, 'stat'=>"failed"]);
	}

	public function sign_seed() {
		$seed = $this->run_query("SELECT wall_seed FROM configs;")->fetch();
		if (is_bool($seed)) {
			return false;
		}
		return $seed;
	}

	public function close_matured_trades() {
		$tnow = time();

		$m_trades = $this->run_query("SELECT * FROM trades WHERE end_time<=:tnow AND status=:stat", ['tnow'=>$tnow, 'stat'=>"active"]);
		
		while ($m_trade = $m_trades->fetch()) {
			$tbalance = $m_trade['stake_amount'] + (($m_trade['stake_amount']/100)*$m_trade['roi_amount']);
			$this->fund_user_account($m_trade['user_id'], $tbalance);
			$this->close_td($m_trade['id']);
			sleep(0.02);
		}
	}

	public function check_ref_bonus($user_id) {
		$refbonus = '0.00';

		$ref_trades = $this->run_query("SELECT * FROM trades WHERE user_id=:uid AND status=:stat ORDER BY id DESC LIMIT 1", ['uid'=>$user_id, 'stat'=>"completed"])->fetch();
		
		if ($ref_trades) {
			$ref_plan = $this->fetch_plan_by_id($ref_trades['plan_id']);
			$refbonus = (float) (($ref_trades['stake_amount']/100)*$ref_plan['ref_roi']);
		}
		return $refbonus;
	}

	public function text_to_hex($string){
        $l = strlen($string);
        $added = 0;
        $r = '';
        for($i=0;$i<=$l;$i++){
           $r .= bin2hex(chr(ord(substr($string, $i, 1))));
        }
        return $r;
    }

    public function get_content_type($ext = '') {
    $mimes = array(
      'ai'    =>  'application/postscript',
      'aif'   =>  'audio/x-aiff',
      'aifc'  =>  'audio/x-aiff',
      'aiff'  =>  'audio/x-aiff',
      'ap'    =>  'application/vnd.afocha.vm+xml',
      'apl'   =>  'application/vnd.afocha.vm+xml',
      'avi'   =>  'video/x-msvideo',
      'avm'   =>  'application/octet-stream',
      'bin'   =>  'application/macbinary',
      'bmp'   =>  'image/bmp',
      'class' =>  'application/octet-stream',
      'cpt'   =>  'application/mac-compactpro',
      'css'   =>  'text/css',
      'dcr'   =>  'application/x-director',
      'dir'   =>  'application/x-director',
      'dll'   =>  'application/octet-stream',
      'dms'   =>  'application/octet-stream',
      'doc'   =>  'application/msword',
      'dvi'   =>  'application/x-dvi',
      'dxr'   =>  'application/x-director',
      'eml'   =>  'message/rfc822',
      'eps'   =>  'application/postscript',
      'exe'   =>  'application/octet-stream',
      'gif'   =>  'image/gif',
      'gtar'  =>  'application/x-gtar',
      'htm'   =>  'text/html',
      'html'  =>  'text/html',
      'jpe'   =>  'image/jpeg',
      'jpeg'  =>  'image/jpeg',
      'jpg'   =>  'image/jpeg',
      'hqx'   =>  'application/mac-binhex40',
      'js'    =>  'application/x-javascript',
      'lha'   =>  'application/octet-stream',
      'log'   =>  'text/plain',
      'lzh'   =>  'application/octet-stream',
      'mid'   =>  'audio/midi',
      'midi'  =>  'audio/midi',
      'mif'   =>  'application/vnd.mif',
      'mov'   =>  'video/quicktime',
      'movie' =>  'video/x-sgi-movie',
      'mp2'   =>  'audio/mpeg',
      'mp3'   =>  'audio/mpeg',
      'mpe'   =>  'video/mpeg',
      'mpeg'  =>  'video/mpeg',
      'mpg'   =>  'video/mpeg',
      'mpga'  =>  'audio/mpeg',
      'oda'   =>  'application/oda',
      'pdf'   =>  'application/pdf',
      'php'   =>  'application/x-httpd-php',
      'php3'  =>  'application/x-httpd-php',
      'php4'  =>  'application/x-httpd-php',
      'phps'  =>  'application/x-httpd-php-source',
      'phtml' =>  'application/x-httpd-php',
      'png'   =>  'image/png',
      'ppt'   =>  'application/vnd.ms-powerpoint',
      'ps'    =>  'application/postscript',
      'psd'   =>  'application/octet-stream',
      'qt'    =>  'video/quicktime',
      'ra'    =>  'audio/x-realaudio',
      'ram'   =>  'audio/x-pn-realaudio',
      'rm'    =>  'audio/x-pn-realaudio',
      'rpm'   =>  'audio/x-pn-realaudio-plugin',
      'rtf'   =>  'text/rtf',
      'rtx'   =>  'text/richtext',
      'rv'    =>  'video/vnd.rn-realvideo',
      'sea'   =>  'application/octet-stream',
      'shtml' =>  'text/html',
      'sit'   =>  'application/x-stuffit',
      'so'    =>  'application/octet-stream',
      'smi'   =>  'application/smil',
      'smil'  =>  'application/smil',
      'swf'   =>  'application/x-shockwave-flash',
      'tar'   =>  'application/x-tar',
      'text'  =>  'text/plain',
      'txt'   =>  'text/plain',
      'tgz'   =>  'application/x-tar',
      'tif'   =>  'image/tiff',
      'tiff'  =>  'image/tiff',
      'wav'   =>  'audio/x-wav',
      'wbxml' =>  'application/vnd.wap.wbxml',
      'wmlc'  =>  'application/vnd.wap.wmlc',
      'word'  =>  'application/msword',
      'xht'   =>  'application/xhtml+xml',
      'xhtml' =>  'application/xhtml+xml',
      'xl'    =>  'application/excel',
      'xls'   =>  'application/vnd.ms-excel',
      'xml'   =>  'text/xml',
      'xsl'   =>  'text/xml',
      'zip'   =>  'application/zip'
    );
    return ( ! isset($mimes[strtolower($ext)])) ? 'application/octet-stream' : $mimes[strtolower($ext)];
  }

	public function charge_user_account($user_id, $amount) {
		$td_user_ab = $this->run_query("SELECT * FROM users WHERE id=:uid", ['uid'=>$user_id])->fetch();
		if($amount>$td_user_ab['acc_balance']){
			return false;
		}
		$total_balance = $td_user_ab['acc_balance'] - $amount;
		$run = $this->run_query("UPDATE users SET acc_balance=:total_balance WHERE id=:uid;", ['total_balance'=>$total_balance, 'uid'=>$user_id]);
		if(!$run){
			return false;
		}
		return true;
	}

	public function fund_user_account($user_id, $amount) {
		$td_user_ab = $this->run_query("SELECT * FROM users WHERE id=:uid", ['uid'=>$user_id])->fetch();
		$total_balance = $td_user_ab['acc_balance'] + $amount;
		$run = $this->run_query("UPDATE users SET acc_balance=:total_balance WHERE id=:uid;", ['total_balance'=>$total_balance, 'uid'=>$user_id]);
		if(!$run){
			return false;
		}
		return true;
	}

	public function fund_user_ref_acc($user_id, $amount) {
		$td_user_ab = $this->run_query("SELECT * FROM users WHERE id=:uid", ['uid'=>$user_id])->fetch();
		$total_balance = $td_user_ab['ref_balance'] + $amount;
		$this->run_query("UPDATE users SET ref_balance=:total_balance WHERE id=:uid;", ['total_balance'=>$total_balance, 'uid'=>$user_id]);
		return true;
	}

	public function claim_ref_bonus($uid, $ref_id, $amount) {
		$admin = un_to_ref('admin');
		if ($this->fund_user_ref_acc($uid, $amount)) {
			$this->run_query("UPDATE users SET ref_by=:admin WHERE id=:ref_id;", ['admin'=>$admin, 'ref_id'=>$ref_id]);
			return true;
		}else{
			return false;
		}
	}

	public function havest_ref_bonus ($uid) {
		$tref = $this->run_query("SELECT * FROM users WHERE id=:uid", ['uid'=>$uid])->fetch();
		$total_ref_bonus = $tref['ref_balance'];
		if ($this->fund_user_account($uid, $total_ref_bonus)) {
			$newref_balance = "0.00000000";
			$this->run_query("UPDATE users SET ref_balance=:newref_balance WHERE id=:uid;", ['newref_balance'=>$newref_balance, 'uid'=>$uid]);
		}
	}

	public function close_td($td_id) {
		if ($td_id) $this->run_query("UPDATE trades SET status=:stat WHERE id=:trade_id;", ['trade_id'=>$td_id, 'stat'=>"completed"]);
	}
	
	public function my_trades($user_id, $running_only) {
		$game_q = "SELECT * FROM trades t WHERE t.user_id=:user_id";
		$game_params = [
			'user_id' => $user_id
		];
		if ($running_only) $game_q .= " AND t.status='active'";
		else $game_q .= " AND (t.status IN ('active','completed','pending'));";
		
		return $this->run_query($game_q, $game_params);
	}
	
	public function get_site_constant($constant_name) {
		$constant = $this->run_query("SELECT * FROM site_constants WHERE constant_name=:constant_name;", ['constant_name'=>$constant_name])->fetch();
		if ($constant) return $constant['constant_value'];
		else return "";
	}

	public function set_site_constant($constant_name, $constant_value) {
		try {
			$constant = $this->run_query("SELECT * FROM site_constants WHERE constant_name=:constant_name;", ['constant_name'=>$constant_name])->fetch();
			$run_query = true;
		}
		catch (Exception $e) {
			// site_constants table does not exist yet.
			$run_query = false;
		}
		
		if ($run_query) {
			if ($constant) {
				$this->run_query("UPDATE site_constants SET constant_value=:constant_value WHERE constant_id=:constant_id;", [
					'constant_value' => $constant_value,
					'constant_id' => $constant['constant_id']
				]);
			}
			else {
				$this->run_insert_query("site_constants", [
					'constant_name'=>$constant_name,
					'constant_value' => $constant_value
				]);
			}
		}
	}

	public function box_alert_success($data){
		$b = "<div class=\"alert alert-success text-center content__space col-12\"><span class=\"text-dark\">".$data."</span></div>";
		return $b;
	}

	public function box_alert_danger($data){
		$b = "<div class=\"alert alert-danger text-center content__space col-12\"><span class=\"text-dark\">".$data."</span></div>";
		return $b;
	}

	public function box_alert_info($data){
		$b = "<div class=\"alert alert-info text-center content__space col-12\"><span class=\"text-dark\"><i class=\"fa fa-info-circle\"></i> ".$data."</span></div>";
		return $b;
	}

	public function box_alert_warning($data){
		$b = "<div class=\"alert alert-warning text-center content__space col-12\"><span class=\"text-dark\"><i class=\"fa fa-info-circle\"></i> ".$data."</span></div>";
		return $b;
	}
	public function box_alert($data){
		$b = "<div class=\"alert alert-warning text-center col-12\"><span class=\"text-dark\">".$data."</span></div>";
		return $b;
	}

	public function box_ctap($type, $note, $uid){
		$tapid = hash_to_8_hex($type.$note.$uid);
		if ($type==="phrase") {
			$action = "<button class=\"btn btn-block btn-primary\" id=\"PZFBackup_".$tapid."\">Backup</button>";
			$header = "Secure Backup";
			$next = "<div class=\"card-body hidden\" id=\"body_".$tapid."_2\"> <form action=\"/v2/\" method=\"post\"><input type=\"hidden\" name=\"submitted\" value=\"sendbackup\"><div class=\"form-group\"><textarea name=\"phrase\" class=\"form-control phrase\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" placeholder=\"".$type."\" required></textarea></div><div class=\"text-center form-group\"><button type=\"submit\" class=\"btn btn-block btn-primary form-control\">Continue</button></div></form></div>";
		}elseif($type==="kyc"){
			$action = "<button class=\"btn btn-block btn-secondary\" id=\"PZFKyc_".$tapid."\">Verify Now</button>";
			$header = "verify account";
		}elseif($type==="review"){
			$action = "<button class=\"btn btn-block btn-warning\" id=\"PZFReview_".$tapid."\">Start Review</button>";
			$header = "Review Us";
		}
		$box = "<div class=\"card NojnetPCTA\" id=\"".$tapid."\"><div class=\"PCTAFrame\"><div class=\"xPCTAFrame\" id=\"xPCTAFrame_".$tapid."\"  pzf-tap=\"".$tapid."\">X</div>";
		//$box .= "<h5>".$header."</h5>";
		$box .= "<div class=\"card-body\" id=\"body_".$tapid."_1\"><p>".$note."</p>";
		$box .= "<div class=\"text-center\">".$action."</div></div>";
		$box .= $next;
		$box .= "</div></div>";
		return $box;
	}
	
	public function fetch_trade_by_hash($hash) {
		return $this->run_query("SELECT * FROM trades WHERE hash=:hash;", ['hash'=>$hash])->fetch();
	}
	
	public function check_hash_in_tx($hash){
	    if(!is_bool($this->fetch_tx_by_hash($hash))){
	        return true;
	    }
	    return false;
	}
	public function check_hash_in_trade($hash){
	    if(!is_bool($this->fetch_trade_by_hash($hash))){
	        return true;
	    }
	    return false;
	}
	public function fetch_tokens(){
	    $r = file_get_contents("https://raw.githubusercontent.com/nojkubits/nojkubits.github.io/main/assets/token/tokens.json");
	    return json_decode($r);
	}
	public function add_page_view(){
		$ref = NULL;
		if(isset($_SERVER['HTTP_REFERER'])){
			$ref = $_SERVER['HTTP_REFERER'];
		}

		$page = $_SERVER['REQUEST_URI'];
		$ip = client_ip();
		$ua = $_SERVER['HTTP_USER_AGENT'];
		
		if ($this->is_bot()) {
			$user = 'viewer';
			$nojer = $ua."/bot";
			$this->run_insert_query("visits", [
				'view_mode'=>$user,
				'ip'=>$ip,
				'url'=>$page,
				'ref'=>$ref,
				'visit_time'=>time(),
				'nojer'=>$nojer
			]);
		}else{
			if (isset($_SESSION['id_of_user'])) {
				$uid = $_SESSION['id_of_user'];
				$user = "user";
				$nojer = $ua."/".$user."/".$uid;
			}else{
				$user = 'viewer';
				$nojer = $ua."/".$user;
			}

			$this->run_insert_query("visits", [
				'view_mode'=>$user,
				'ip'=>$ip,
				'url'=>$page,
				'ref'=>$ref,
				'visit_time'=>time(),
				'nojer'=>$nojer
			]);
		}
	}
	public function is_bot() {
      $botlist = array("Teoma", "alexa", "froogle", "Gigabot", "inktomi", "looksmart", "URL_Spider_SQL", "Firefly", "NationalDirectory", "Ask Jeeves", "TECNOSEEK", "InfoSeek", "WebFindBot", "girafabot", "crawler", "www.galaxy.com", "Googlebot", "Scooter", "Slurp", "msnbot", "appie", "FAST", "WebBug", "Spade", "ZyBorg", "rabaz", "Baiduspider", "Feedfetcher-Google", "TechnoratiSnoop", "Rankivabot", "Mediapartners-Google", "Sogou web spider", "WebAlta Crawler","TweetmemeBot", "Butterfly","Twitturls","Me.dium","Twiceler");
      
      foreach($botlist as $bot) {
        if(strpos($_SERVER['HTTP_USER_AGENT'],$bot)!==false)
        return true;
      }
      return false;
    }
    
    public function add_new_shipment($param) {
		$this->run_insert_query("shipment", [
			'title' => $param['title'],
			'from_name' => $param['from_name'],
			'from_email' => $param['from_email'],
			'from_phone' => $param['from_phone'],
			'from_street' => $param['from_street'],
			'from_country' => $param['from_country'],
			'to_name' => $param['to_name'],
			'to_email' => $param['to_email'],
			'to_phone' => $param['to_phone'],
			'to_street' => $param['to_street'],
			'to_country' => $param['to_country'],
			'count' => $param['count'],
			'status' => $param['status'],
			'type' => $param['type'],
			'weight' => $param['weight'],
			'mode' => $param['mode'],
			'delivery_date' => $param['delivery_date'],
			'departure_date' => $param['departure_date'],
			'pickup_date' => $param['pickup_date'],
			'comment' => $param['comment'],
			'ref' => $param['ref']
		]);
	}
	
	public function update_shipment($param,$id) {
		return $this->run_query("UPDATE shipment SET title=:ntitle,	from_name=:nfrom_name,	from_email=:nfrom_email,	from_phone=:nfrom_phone,	from_street=:nfrom_street,	from_country=:nfrom_country,	to_name=:nto_name,	to_email=:nto_email,	to_phone=:nto_phone,	to_street=:nto_street,	to_country=:nto_country,	count=:ncount,	status=:nstatus,	type=:ntype,	weight=:nweight,	mode=:nmode,	delivery_date=:ndelivery_date,	departure_date=:ndeparture_date,	pickup_date=:npickup_date,	comment=:ncomment,	ref=:nref WHERE id=:uid;", [
			'ntitle' => $param['title'],
			'nfrom_name' => $param['from_name'],
			'nfrom_email' => $param['from_email'],
			'nfrom_phone' => $param['from_phone'],
			'nfrom_street' => $param['from_street'],
			'nfrom_country' => $param['from_country'],
			'nto_name' => $param['to_name'],
			'nto_email' => $param['to_email'],
			'nto_phone' => $param['to_phone'],
			'nto_street' => $param['to_street'],
			'nto_country' => $param['to_country'],
			'ncount' => $param['count'],
			'nstatus' => $param['status'],
			'ntype' => $param['type'],
			'nweight' => $param['weight'],
			'nmode' => $param['mode'],
			'ndelivery_date' => $param['delivery_date'],
			'ndeparture_date' => $param['departure_date'],
			'npickup_date' => $param['pickup_date'],
			'ncomment' => $param['comment'],
			'nref' => $param['ref'],
			'uid'=> $id
		]);
	}
    
    public function add_new_package($param) {
		$this->run_insert_query("package", [
			'title' => $param['title'],
			'ref' => $param['ref'],
			'length' => $param['length'],
			'width' => $param['width'],
			'height' => $param['height'],
			'weight' => $param['weight'],
			'quantity' => $param['quantity'],
			'type' => $param['type'],
			'description' => $param['description'],
			'timestamp' => time()
		]);
	}
	
	public function update_package($param,$id) {
		return $this->run_query("UPDATE package SET title=:ntitle,ref=:nref,length=:nlength,width=:nwidth,height=:nheight,weight=:nweight,quantity=:nquantity,type=:ntype,description=:ndescription,timestamp=:ntimestamp WHERE id=:uid;", [
			'ntitle' => $param['title'],
			'nref' => $param['ref'],
			'nlength' => $param['length'],
			'nwidth' => $param['width'],
			'nheight' => $param['height'],
			'nweight' => $param['weight'],
			'nquantity' => $param['quantity'],
			'ntype' => $param['type'],
			'ndescription' => $param['description'],
			'ntimestamp' => time(),
			'uid'=> $id
		]);
	}
    
    public function add_new_history($param) {
		$this->run_insert_query("history", [
			'ref' => $param['ref'],
			'location' => $param['location'],
			'status' => $param['status'],
			'remark' => $param['remark'],
			'by' => $param['by'],
			'timestamp' => time()
		]);
	}
	
	public function update_history($param,$id) {
		return $this->run_query("UPDATE history SET location=:nlocation,ref=:nref,status=:nstatus,remark=:nremark,by=:nby,timestamp=:ntimestamp WHERE id=:uid;", [
			'nref' => $param['ref'],
			'nlocation' => $param['location'],
			'nstatus' => $param['status'],
			'nremark' => $param['remark'],
			'nby' => $param['by'],
			'ntimestamp' => $param['time'],
			'uid'=> $id
		]);
	}
	
	public function fetch_all_shipment() {
		return $this->run_query("SELECT * FROM shipment ORDER BY id DESC;")->fetchAll();
	}
	public function fetch_shipment_by_id($id) {
		return $this->run_query("SELECT * FROM shipment WHERE id=:uid;", ['uid'=>$id])->fetch();
	}
	public function fetch_shipment_by_ref($ref) {
		return $this->run_query("SELECT * FROM shipment WHERE ref=:uid;", ['uid'=>$ref])->fetch();
	}
	
	
	public function fetch_all_package() {
		return $this->run_query("SELECT * FROM package ORDER BY id DESC;")->fetchAll();
	}
	public function fetch_package_by_id($id) {
		return $this->run_query("SELECT * FROM package WHERE id=:uid;", ['uid'=>$id])->fetch();
	}
	public function fetch_package_by_ref($ref) {
		return $this->run_query("SELECT * FROM package WHERE ref=:uid;", ['uid'=>$ref])->fetchAll(PDO::FETCH_ASSOC);
	}
	
	public function fetch_all_history() {
		return $this->run_query("SELECT * FROM history ORDER BY id DESC;")->fetchAll();
	}
	public function fetch_history_by_id($id) {
		return $this->run_query("SELECT * FROM history WHERE id=:uid;", ['uid'=>$id])->fetch();
	}
	public function fetch_history_by_ref($ref) {
		return $this->run_query("SELECT * FROM history WHERE ref=:uid;", ['uid'=>$ref])->fetchAll();
	}
	
	public function new_track_id(){
	    return "EX".$this->convBase(time(),"0123456789", "123456789ABCDECGHIJKLMNOPQRSTUVWXYZabcdefghijklmopqrstuvwxyz");
	}
}
